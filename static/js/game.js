// JavaScript –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–≥—Ä—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
document.addEventListener('DOMContentLoaded', function() {
    // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã DOM
    const startGameBtn = document.getElementById('startGame');
    const nextRoundBtn = document.getElementById('nextRound');
    const resetGameBtn = document.getElementById('resetGame');
    const gameStatusEl = document.getElementById('gameStatus');
    const gameRoundEl = document.getElementById('gameRound');
    const currentLotEl = document.getElementById('currentLot');
    const bidsListEl = document.getElementById('bidsList');
    const auctionResultEl = document.getElementById('auctionResult');
    const playersListEl = document.getElementById('playersList');
    const userInfoEl = document.getElementById('userInfo');
    const buyButtonEl = document.getElementById('buyButton');
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
    let gameState = {
        status: 'waiting',
        round: 0,
        currentLot: null,
        bids: {},
        players: []
    };
    
    // –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let userData = null;
    
    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã —Å —Å–µ—Ä–≤–µ—Ä–∞
     */
    async function loadGameState() {
        try {
            Utils.showLoading(true);
            const response = await API.get('/api/game/status');
            
            gameState = response;
            updateUI();
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await loadUserData();
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã:', error);
            Utils.showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã', 'error');
        } finally {
            Utils.showLoading(false);
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async function loadUserData() {
        try {
            const response = await API.get('/api/user/data');
            if (response.success) {
                userData = response.user_data;
                updateUserInfo();
            }
        } catch (error) {
            console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —Å–µ—Å—Å–∏—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞');
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
     */
    function updateUI() {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã
        gameStatusEl.textContent = getStatusText(gameState.game.status);
        gameRoundEl.textContent = `–†–∞—É–Ω–¥: ${gameState.game.round}`;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        updateButtons();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –ª–æ—Ç
        updateCurrentLot();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
        updatePlayersList();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞–≤–∫–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        updateBidsAndResult();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        updateUserInfo();
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
     */
    function updateUserInfo() {
        if (userData && userInfoEl) {
            userInfoEl.innerHTML = `
                <div class="user-card">
                    <h3>üéÆ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</h3>
                    <div class="user-stats">
                        <p><strong>–ë–∞–ª–∞–Ω—Å:</strong> ${Utils.formatMoney(userData.balance)}</p>
                        <p><strong>–ü—Ä–∏–±—ã–ª—å:</strong> ${Utils.formatMoney(userData.total_profit)}</p>
                        <p><strong>–ü–æ–∫—É–ø–∫–∏:</strong> ${userData.purchases}</p>
                        <p><strong>–õ—é–±–∏–º—ã–π —Ç–æ–≤–∞—Ä:</strong> ${userData.wants}</p>
                        <p><strong>–ù–µ–ª—é–±–∏–º—ã–π —Ç–æ–≤–∞—Ä:</strong> ${userData.no_wants}</p>
                    </div>
                </div>
            `;
        }
    }
    
    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–≥—Ä—ã
     * @param {string} status - –°—Ç–∞—Ç—É—Å –∏–≥—Ä—ã
     * @returns {string} - –û–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
     */
    function getStatusText(status) {
        const statusMap = {
            'waiting': '–û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞',
            'playing': '–ò–≥—Ä–∞ –∏–¥–µ—Ç',
            'finished': '–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'
        };
        return statusMap[status] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å';
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
     */
    function updateButtons() {
        const isPlaying = gameState.game.status === 'playing';
        const isFinished = gameState.game.status === 'finished';
        
        startGameBtn.disabled = isPlaying;
        nextRoundBtn.disabled = !isPlaying || isFinished;
        resetGameBtn.disabled = false;
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ª–æ—Ç–∞
     */
    function updateCurrentLot() {
        if (gameState.game.current_lot) {
            const lot = gameState.game.current_lot;
            const canBuy = userData && userData.balance >= lot.price;
            
            currentLotEl.innerHTML = `
                <div class="lot-info">
                    <h3>${lot.name}</h3>
                    <div class="lot-details">
                        <p><strong>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</strong> ${lot.quantity} —à—Ç.</p>
                        <p><strong>–¶–µ–Ω–∞:</strong> ${Utils.formatMoney(lot.price)}</p>
                        <p><strong>–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å:</strong> ${Utils.formatMoney(lot.cost)}</p>
                        <p><strong>–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å:</strong> ${Utils.formatMoney(lot.cost - lot.price)}</p>
                    </div>
                    ${userData ? `
                        <div class="user-actions">
                            <button id="buyButton" class="btn btn-primary" ${!canBuy ? 'disabled' : ''} 
                                    onclick="buyProduct(${lot.id})">
                                ${canBuy ? '–ö—É–ø–∏—Ç—å –∑–∞ ' + Utils.formatMoney(lot.price) : '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤'}
                            </button>
                        </div>
                    ` : ''}
                </div>
            `;
        } else {
            currentLotEl.innerHTML = '<p>–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤</p>';
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
     */
    function updatePlayersList() {
        if (gameState.players && gameState.players.length > 0) {
            playersListEl.innerHTML = gameState.players.map(player => `
                <div class="player-card">
                    <div class="player-avatar">${player.name.charAt(0)}</div>
                    <h3>${player.name}</h3>
                    <p>–ë–∞–ª–∞–Ω—Å: ${Utils.formatMoney(player.balance)}</p>
                    <p>–ü—Ä–∏–±—ã–ª—å: ${Utils.formatMoney(player.total_profit)}</p>
                    <p>–ü–æ–∫—É–ø–∫–∏: ${player.purchases}</p>
                </div>
            `).join('');
        } else {
            playersListEl.innerHTML = '<p>–ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä–æ–∫–æ–≤...</p>';
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞–≤–æ–∫ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
     */
    function updateBidsAndResult() {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞–≤–∫–∏
        if (gameState.game.bids && Object.keys(gameState.game.bids).length > 0) {
            const bidsArray = Object.values(gameState.game.bids);
            bidsArray.sort((a, b) => b.amount - a.amount);
            
            bidsListEl.innerHTML = bidsArray.map((bid, index) => `
                <div class="bid-item ${index === 0 ? 'winner' : ''}">
                    <span>${bid.player_name}</span>
                    <span>${Utils.formatMoney(bid.amount)}</span>
                </div>
            `).join('');
        } else {
            bidsListEl.innerHTML = '<p>–°—Ç–∞–≤–∫–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å</p>';
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if (gameState.game.result) {
            const result = gameState.game.result;
            auctionResultEl.innerHTML = `
                <div class="result-info">
                    <h3>üèÜ ${result.winner_name}</h3>
                    <p><strong>–°—Ç–∞–≤–∫–∞:</strong> ${Utils.formatMoney(result.winning_bid)}</p>
                    <p><strong>–ü—Ä–æ–¥–∞–∂–∞:</strong> ${Utils.formatMoney(result.selling_price)}</p>
                    <p><strong>–ü—Ä–∏–±—ã–ª—å:</strong> ${Utils.formatMoney(result.profit)}</p>
                    <p><strong>–û—Å—Ç–∞–ª–æ—Å—å:</strong> ${result.remaining_quantity} —à—Ç.</p>
                </div>
            `;
        } else {
            auctionResultEl.innerHTML = '<p>–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–æ—Ä–≥–æ–≤ –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å</p>';
        }
    }
    
    /**
     * –ù–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—É—é –∏–≥—Ä—É
     */
    async function startGame() {
        try {
            Utils.showLoading(true);
            const response = await API.post('/api/game/start');
            
            if (response.success) {
                Utils.showNotification('–ò–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞!', 'success');
                if (response.user_data) {
                    userData = response.user_data;
                }
                await loadGameState();
            } else {
                Utils.showNotification(response.message, 'error');
            }
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã:', error);
            Utils.showNotification('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã', 'error');
        } finally {
            Utils.showLoading(false);
        }
    }
    
    /**
     * –ü–æ–∫—É–ø–∞–µ—Ç —Ç–æ–≤–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
     */
    async function buyProduct(productId) {
        try {
            Utils.showLoading(true);
            const response = await API.post('/api/user/buy', { product_id: productId });
            
            if (response.success) {
                Utils.showNotification(response.message, 'success');
                userData = response.user_data;
                await loadGameState();
            } else {
                Utils.showNotification(response.message, 'error');
            }
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞:', error);
            Utils.showNotification('–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞', 'error');
        } finally {
            Utils.showLoading(false);
        }
    }
    
    // –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∫—É–ø–∫–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–π
    window.buyProduct = buyProduct;
    
    /**
     * –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–∞—É–Ω–¥—É
     */
    async function nextRound() {
        try {
            Utils.showLoading(true);
            const response = await API.post('/api/game/next-round');
            
            if (response.success) {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
                gameState.game.round = response.round;
                gameState.game.current_lot = response.current_lot;
                gameState.game.bids = response.bids;
                gameState.game.result = response.result;
                
                if (response.game_over) {
                    gameState.game.status = 'finished';
                    Utils.showNotification(response.message, 'info');
                }
                
                updateUI();
                
            } else {
                Utils.showNotification(response.message, 'error');
            }
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ä–∞—É–Ω–¥–∞:', error);
            Utils.showNotification('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ä–∞—É–Ω–¥–∞', 'error');
        } finally {
            Utils.showLoading(false);
        }
    }
    
    /**
     * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏–≥—Ä—É
     */
    async function resetGame() {
        try {
            Utils.showLoading(true);
            const response = await API.post('/api/game/reset');
            
            if (response.success) {
                Utils.showNotification('–ò–≥—Ä–∞ —Å–±—Ä–æ—à–µ–Ω–∞!', 'success');
                await loadGameState();
            } else {
                Utils.showNotification(response.message, 'error');
            }
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –∏–≥—Ä—ã:', error);
            Utils.showNotification('–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –∏–≥—Ä—ã', 'error');
        } finally {
            Utils.showLoading(false);
        }
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    startGameBtn.addEventListener('click', startGame);
    nextRoundBtn.addEventListener('click', nextRound);
    resetGameBtn.addEventListener('click', resetGame);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    loadGameState();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
    setInterval(loadGameState, 5000);
});
