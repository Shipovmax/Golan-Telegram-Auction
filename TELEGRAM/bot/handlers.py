# handlers.py ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ callback'–∏.
from aiogram import Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from bot import storage, auction, players, products
import logging

logger = logging.getLogger(__name__)

def register_handlers(dp: Dispatcher, bot):
    dp.register_message_handler(cmd_start, commands=['start'])
    dp.register_callback_query_handler(callback_query_handler)

async def cmd_start(message: types.Message):
    # –ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ ‚Äî —Å–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç (—Å –±–∞–ª–∞–Ω—Å–æ–º 100000 –¥–ª—è —Ç–µ—Å—Ç–∞)
    await storage.create_or_update_player(message.from_user.id, message.from_user.full_name, balance=100000, is_bot=False)
    row = await storage.get_player(message.from_user.id)
    balance = row['balance'] if row else 0
    text = f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!\n–ë–∞–ª–∞–Ω—Å: {balance}"
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(InlineKeyboardButton('‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –∞—É–∫—Ü–∏–æ–Ω', callback_data='start_auction'))
    kb.add(InlineKeyboardButton('üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data=f'stat_{message.from_user.id}'))
    kb.add(InlineKeyboardButton('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤', callback_data='stat_all'))
    await message.answer(text, reply_markup=kb)

async def callback_query_handler(call: types.CallbackQuery):
    data = call.data
    if data == 'start_auction':
        if not products.PRODUCTS:
            await call.answer('–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–∞.')
            return
        product_code = list(products.PRODUCTS.keys())[0]
        msg = await call.message.answer('–ó–∞–ø—É—Å–∫ –∞—É–∫—Ü–∏–æ–Ω–∞...')
        auction_id = await auction.manager.start_new_auction(product_code, call.message.chat.id, msg)
        await call.answer('–ê—É–∫—Ü–∏–æ–Ω –∑–∞–ø—É—â–µ–Ω')
        return

    if data and data.startswith('buy_'):
        try:
            auction_id = int(data.split('_',1)[1])
        except Exception:
            await call.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π auction id')
            return
        res = await auction.manager.handle_user_buy(auction_id, call.from_user.id)
        if res.get('ok'):
            await call.message.answer(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∫—É–ø–∏–ª–∏ —Ç–æ–≤–∞—Ä. –ü—Ä–∏–±—ã–ª—å: {res.get('profit')}")
            await call.answer()
        else:
            await call.answer(f"–ü–æ–∫—É–ø–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: {res.get('reason')}")
        return

    if data and data.startswith('cont_'):
        await call.answer('–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º ‚Äî —Ü–µ–Ω–∞ –∏–∑–º–µ–Ω–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.')
        return
    if data and data.startswith('exit_'):
        try:
            await call.message.delete()
        except Exception:
            pass
        await call.answer('–í—ã—Ö–æ–¥ –≤ –º–µ–Ω—é')
        return

    if data and data.startswith('stat_'):
        pid = int(data.split('_',1)[1])
        purchases = await storage.get_player_purchases(pid)
        text = f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞ {pid}:\n"
        if not purchases:
            text += "–ù–µ—Ç –ø–æ–∫—É–ø–æ–∫"
        else:
            for p in purchases:
                text += f"- Product {p['product_id']} | price {p['buy_price']} | profit {p['profit']}\n"
        await call.message.answer(text)
        await call.answer()
        return
