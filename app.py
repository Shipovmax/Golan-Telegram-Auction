# -*- coding: utf-8 -*-
"""
üî• –ì–û–õ–õ–ê–ù–î–°–ö–ò–ô –ê–£–ö–¶–ò–û–ù GOLAN üî•
–ü—Ä–æ—Å—Ç–æ–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–µ–∑ –ª–∏—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

–ê–≤—Ç–æ—Ä: Golan Auction Team
–í–µ—Ä—Å–∏—è: 2.0
–û–ø–∏—Å–∞–Ω–∏–µ: –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∏–≥—Ä—ã –≤ –≥–æ–ª–ª–∞–Ω–¥—Å–∫–∏–π –∞—É–∫—Ü–∏–æ–Ω —Ü–≤–µ—Ç–æ–≤
–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: 
- –ë–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (in-memory)
- –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—É—Å–∫ (–æ–¥–∏–Ω —Ñ–∞–π–ª)
- –ö—Ä–∞—Å–∏–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
- –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏–∫–∞
"""

import os
import sys
import random
import uuid
from datetime import datetime
from flask import Flask, render_template, request, jsonify, session

# ============================================================================
# –ù–ê–°–¢–†–û–ô–ö–ê FLASK –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
# ============================================================================

# –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)
app.secret_key = 'golan-auction-secret-key-2024'  # –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è —Å–µ—Å—Å–∏–π

# ============================================================================
# –ú–û–î–ï–õ–ò –î–ê–ù–ù–´–•
# ============================================================================

class Player:
    """
    –ò–≥—Ä–æ–∫ –≤ –∞—É–∫—Ü–∏–æ–Ω–µ
    
    –ê—Ç—Ä–∏–±—É—Ç—ã:
    - id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–≥—Ä–æ–∫–∞
    - name: –ò–º—è –∏–≥—Ä–æ–∫–∞
    - balance: –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
    - initial_balance: –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
    - wants: –õ—é–±–∏–º—ã–π —Ç–æ–≤–∞—Ä (–±–æ–Ω—É—Å –∫ –ø–æ–∫—É–ø–∫–µ)
    - no_wants: –ù–µ–ª—é–±–∏–º—ã–π —Ç–æ–≤–∞—Ä (—à—Ç—Ä–∞—Ñ –∫ –ø–æ–∫—É–ø–∫–µ)
    - total_profit: –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å
    - purchases: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫
    - sales: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂
    - is_user: –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–Ω–µ –ò–ò)
    - session_id: ID —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    def __init__(self, id, name, balance, wants, no_wants):
        self.id = id
        self.name = name
        self.balance = balance
        self.initial_balance = balance
        self.wants = wants  # –õ—é–±–∏–º—ã–π —Ç–æ–≤–∞—Ä
        self.no_wants = no_wants  # –ù–µ–ª—é–±–∏–º—ã–π —Ç–æ–≤–∞—Ä
        self.total_profit = 0  # –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å
        self.purchases = 0  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫
        self.sales = 0  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂
        self.is_user = False  # –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        self.session_id = None  # ID —Å–µ—Å—Å–∏–∏
    
    def to_dict(self):
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∏–≥—Ä–æ–∫–∞ –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è JSON"""
        return {
            'id': self.id,
            'name': self.name,
            'balance': self.balance,
            'initial_balance': self.initial_balance,
            'wants': self.wants,
            'no_wants': self.no_wants,
            'total_profit': self.total_profit,
            'purchases': self.purchases,
            'sales': self.sales
        }
    
    def can_buy(self, price):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫ –∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ü–µ–Ω–µ"""
        return self.balance >= price
    
    def get_preference_multiplier(self, product_name):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–Ω–æ–∂–∏—Ç–µ–ª—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –¥–ª—è —Ç–æ–≤–∞—Ä–∞
        1.5 - –¥–ª—è –ª—é–±–∏–º–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        0.3 - –¥–ª—è –Ω–µ–ª—é–±–∏–º–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        1.0 - –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        """
        if product_name == self.wants:
            return 1.5  # –ë–æ–Ω—É—Å –∑–∞ –ª—é–±–∏–º—ã–π —Ç–æ–≤–∞—Ä
        elif product_name == self.no_wants:
            return 0.3  # –®—Ç—Ä–∞—Ñ –∑–∞ –Ω–µ–ª—é–±–∏–º—ã–π —Ç–æ–≤–∞—Ä
        else:
            return 1.0  # –û–±—ã—á–Ω—ã–π —Ç–æ–≤–∞—Ä
    
    def buy_product(self, product, price):
        """
        –ü–æ–∫—É–ø–∞–µ—Ç —Ç–æ–≤–∞—Ä –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ü–µ–Ω–µ
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–±—ã–ª—å –æ—Ç –ø–æ–∫—É–ø–∫–∏
        """
        if not self.can_buy(price):
            return 0  # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤
        
        # –°–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏
        self.balance -= price
        self.purchases += 1
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±—ã–ª—å –∫–∞–∫ –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç —Ü–µ–Ω—ã –ø–æ–∫—É–ø–∫–∏ (130% = 1.3)
        profit_multiplier = 1.3  # 130% –ø—Ä–∏–±—ã–ª–∏
        profit = price * profit_multiplier
        self.total_profit += profit
        self.sales += 1
        
        return profit

class Product:
    """
    –¢–æ–≤–∞—Ä –≤ –∞—É–∫—Ü–∏–æ–Ω–µ
    
    –ê—Ç—Ä–∏–±—É—Ç—ã:
    - id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–æ–≤–∞—Ä–∞
    - name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    - cost: –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞
    - initial_price: –ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∞—É–∫—Ü–∏–æ–Ω–∞
    - current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ (—Å–Ω–∏–∂–∞–µ—Ç—Å—è –≤ –≥–æ–ª–ª–∞–Ω–¥—Å–∫–æ–º –∞—É–∫—Ü–∏–æ–Ω–µ)
    - quantity: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞
    - initial_quantity: –ù–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    """
    def __init__(self, id, name, cost, price, quantity):
        self.id = id
        self.name = name
        self.cost = cost  # –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å
        self.initial_price = price  # –ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞
        self.current_price = price  # –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ (—Å–Ω–∏–∂–∞–µ—Ç—Å—è)
        self.quantity = quantity  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
        self.initial_quantity = quantity  # –ù–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    
    def to_dict(self):
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–æ–≤–∞—Ä –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è JSON"""
        return {
            'id': self.id,
            'name': self.name,
            'cost': self.cost,
            'initial_price': self.initial_price,
            'current_price': self.current_price,
            'quantity': self.quantity,
            'initial_quantity': self.initial_quantity
        }
    
    def is_available(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —Ç–æ–≤–∞—Ä –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏"""
        return self.quantity > 0
    
    def reduce_price(self, ratio=0.95):
        """
        –°–Ω–∏–∂–∞–µ—Ç —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (–≥–æ–ª–ª–∞–Ω–¥—Å–∫–∏–π –∞—É–∫—Ü–∏–æ–Ω)
        ratio: –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–Ω–∏–∂–µ–Ω–∏—è (0.95 = —Å–Ω–∏–∂–µ–Ω–∏–µ –Ω–∞ 5%)
        """
        self.current_price = int(self.current_price * ratio)
    
    def sell_one(self):
        """–ü—Ä–æ–¥–∞–µ—Ç –æ–¥–Ω—É –µ–¥–∏–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞"""
        if self.is_available():
            self.quantity -= 1
            return True
        return False
    
    def reset_to_initial(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ç–æ–≤–∞—Ä –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é"""
        self.current_price = self.initial_price
        self.quantity = self.initial_quantity

class Game:
    """–ò–≥—Ä–æ–≤–∞—è —Å–µ—Å—Å–∏—è"""
    def __init__(self):
        self.id = 1
        self.status = 'waiting'
        self.current_round = 0
        self.current_product_id = None
        self.winner_id = None
        self.start_time = datetime.now()
        self.end_time = None
    
    def to_dict(self):
        return {
            'id': self.id,
            'status': self.status,
            'current_round': self.current_round,
            'current_product_id': self.current_product_id,
            'winner_id': self.winner_id,
            'start_time': self.start_time.isoformat() if self.start_time else None,
            'end_time': self.end_time.isoformat() if self.end_time else None
        }

# ============================================================================
# –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï
# ============================================================================

players = []
products = []
current_game = None
user_session_id = None

# ============================================================================
# –§–£–ù–ö–¶–ò–ò –î–ê–ù–ù–´–•
# ============================================================================

def create_initial_data():
    """–°–æ–∑–¥–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    global players, products
    
    all_products = [
        "–†–æ–∑—ã", "–ü–∏–æ–Ω—ã", "–ì–µ–æ—Ä–≥–∏–Ω—ã", "–†–æ–º–∞—à–∫–∏", "–õ–∏–ª–∏–∏", "–¢—é–ª—å–ø–∞–Ω—ã",
        "–û—Ä—Ö–∏–¥–µ–∏", "–•—Ä–∏–∑–∞–Ω—Ç–µ–º—ã", "–õ–∞–≤–∞–Ω–¥–∞", "–ù–∞—Ä—Ü–∏—Å—Å—ã", "–ò—Ä–∏—Å—ã", "–ì–≤–æ–∑–¥–∏–∫–∏"
    ]
    
    player_names = ["–í–∞–Ω—è", "–ê–Ω–∞—Å—Ç–∞—Å–∏—è", "–ò–≥–æ—Ä—å", "–ú–∞—Ä–∏–Ω–∞", "–î–º–∏—Ç—Ä–∏–π", "–°–≤–µ—Ç–ª–∞–Ω–∞"]
    
    # –°–æ–∑–¥–∞–µ–º AI –∏–≥—Ä–æ–∫–æ–≤
    players = []
    for i, name in enumerate(player_names):
        wants = random.choice(all_products)
        no_wants = random.choice([p for p in all_products if p != wants])
        balance = random.randint(150000, 195000)
        
        player = Player(i + 1, name, balance, wants, no_wants)
        players.append(player)
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_wants = random.choice(all_products)
    user_no_wants = random.choice([p for p in all_products if p != user_wants])
    user_balance = random.randint(150000, 195000)
    
    user_player = Player(len(players) + 1, "–í—ã (–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)", user_balance, user_wants, user_no_wants)
    user_player.is_user = True
    players.append(user_player)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä—ã
    products_data = [
        {"name": "–†–æ–∑—ã", "cost": 50000, "price": 80000, "quantity": 300},
        {"name": "–ü–∏–æ–Ω—ã", "cost": 85000, "price": 150000, "quantity": 100},
        {"name": "–ì–µ–æ—Ä–≥–∏–Ω—ã", "cost": 30000, "price": 50000, "quantity": 80},
        {"name": "–†–æ–º–∞—à–∫–∏", "cost": 100000, "price": 130000, "quantity": 500},
        {"name": "–õ–∏–ª–∏–∏", "cost": 60000, "price": 95000, "quantity": 200},
        {"name": "–¢—é–ª—å–ø–∞–Ω—ã", "cost": 40000, "price": 65000, "quantity": 350},
        {"name": "–û—Ä—Ö–∏–¥–µ–∏", "cost": 120000, "price": 200000, "quantity": 60},
        {"name": "–•—Ä–∏–∑–∞–Ω—Ç–µ–º—ã", "cost": 45000, "price": 70000, "quantity": 250},
        {"name": "–õ–∞–≤–∞–Ω–¥–∞", "cost": 20000, "price": 35000, "quantity": 400},
        {"name": "–ù–∞—Ä—Ü–∏—Å—Å—ã", "cost": 55000, "price": 90000, "quantity": 150},
        {"name": "–ò—Ä–∏—Å—ã", "cost": 70000, "price": 115000, "quantity": 120},
        {"name": "–ì–≤–æ–∑–¥–∏–∫–∏", "cost": 25000, "price": 45000, "quantity": 300}
    ]
    
    products = []
    for i, product_data in enumerate(products_data):
        product = Product(
            i + 1,
            product_data["name"],
            product_data["cost"],
            product_data["price"],
            product_data["quantity"]
        )
        products.append(product)

def reset_all_players():
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤"""
    global players
    for player in players:
        player.balance = player.initial_balance
        player.total_profit = 0
        player.purchases = 0
        player.sales = 0

def reset_all_products():
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–æ–≤–∞—Ä—ã"""
    global products
    for product in products:
        product.reset_to_initial()

def randomize_all_players():
    """–†–∞–Ω–¥–æ–º–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤"""
    global players
    all_products = [
        "–†–æ–∑—ã", "–ü–∏–æ–Ω—ã", "–ì–µ–æ—Ä–≥–∏–Ω—ã", "–†–æ–º–∞—à–∫–∏", "–õ–∏–ª–∏–∏", "–¢—é–ª—å–ø–∞–Ω—ã",
        "–û—Ä—Ö–∏–¥–µ–∏", "–•—Ä–∏–∑–∞–Ω—Ç–µ–º—ã", "–õ–∞–≤–∞–Ω–¥–∞", "–ù–∞—Ä—Ü–∏—Å—Å—ã", "–ò—Ä–∏—Å—ã", "–ì–≤–æ–∑–¥–∏–∫–∏"
    ]
    
    for player in players:
        if not player.is_user:
            player.wants = random.choice(all_products)
            player.no_wants = random.choice([p for p in all_products if p != player.wants])
            player.initial_balance = random.randint(150000, 195000)
            player.balance = player.initial_balance
            player.total_profit = 0
            player.purchases = 0
            player.sales = 0

def create_new_user_session(session_id):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    global players, user_session_id
    user_session_id = session_id
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    players = [p for p in players if not p.is_user]
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    all_products = [
        "–†–æ–∑—ã", "–ü–∏–æ–Ω—ã", "–ì–µ–æ—Ä–≥–∏–Ω—ã", "–†–æ–º–∞—à–∫–∏", "–õ–∏–ª–∏–∏", "–¢—é–ª—å–ø–∞–Ω—ã",
        "–û—Ä—Ö–∏–¥–µ–∏", "–•—Ä–∏–∑–∞–Ω—Ç–µ–º—ã", "–õ–∞–≤–∞–Ω–¥–∞", "–ù–∞—Ä—Ü–∏—Å—Å—ã", "–ò—Ä–∏—Å—ã", "–ì–≤–æ–∑–¥–∏–∫–∏"
    ]
    
    user_wants = random.choice(all_products)
    user_no_wants = random.choice([p for p in all_products if p != user_wants])
    user_balance = random.randint(150000, 195000)
    
    user_player = Player(len(players) + 1, "–í—ã (–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)", user_balance, user_wants, user_no_wants)
    user_player.is_user = True
    user_player.session_id = session_id
    players.append(user_player)
    
    return user_player

def get_user_player(session_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ session_id"""
    for player in players:
        if player.is_user and player.session_id == session_id:
            return player
    return None

# ============================================================================
# –î–í–ò–ñ–û–ö –ê–£–ö–¶–ò–û–ù–ê
# ============================================================================

class DutchAuctionEngine:
    """–î–≤–∏–∂–æ–∫ –≥–æ–ª–ª–∞–Ω–¥—Å–∫–æ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞"""
    
    def __init__(self):
        self.price_reduction_step = 0.05
        self.min_price_ratio = 0.3
    
    def start_new_game(self, session_id=None):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—É—é –∏–≥—Ä—É"""
        global current_game, players, products
        
        try:
            current_game = Game()
            current_game.status = 'playing'
            current_game.current_round = 1
            
            randomize_all_players()
            
            if session_id:
                create_new_user_session(session_id)
            
            reset_all_products()
            
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã: {e}")
            return False
    
    def get_current_game_state(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã"""
        global current_game, players, products
        
        if not current_game:
            return {
                'game': None,
                'players': [],
                'products': [],
                'message': '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã'
            }
        
        return {
            'game': current_game.to_dict(),
            'players': [p.to_dict() for p in players],
            'products': [p.to_dict() for p in products]
        }
    
    def conduct_dutch_auction_round(self):
        """–ü—Ä–æ–≤–æ–¥–∏—Ç —Ä–∞—É–Ω–¥ –≥–æ–ª–ª–∞–Ω–¥—Å–∫–æ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Å–Ω–∏–∂–µ–Ω–∏–µ–º —Ü–µ–Ω—ã"""
        global current_game, players, products
        
        try:
            if not current_game or current_game.status != 'playing':
                return {
                    'success': False,
                    'message': '–ò–≥—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É.'
                }
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ç–æ–≤–∞—Ä
            available_products = [p for p in products if p.is_available()]
            if not available_products:
                current_game.status = 'finished'
                current_game.end_time = datetime.now()
                return {
                    'success': False,
                    'message': '–í—Å–µ —Ç–æ–≤–∞—Ä—ã –ø—Ä–æ–¥–∞–Ω—ã!',
                    'game_over': True
                }
            
            selected_product = random.choice(available_products)
            current_game.current_product_id = selected_product.id
            
            # –ì–û–õ–õ–ê–ù–î–°–ö–ò–ô –ê–£–ö–¶–ò–û–ù: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–Ω–∏–∂–∞–µ–º —Ü–µ–Ω—É –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –∫—Ç–æ-—Ç–æ –Ω–µ –∫—É–ø–∏—Ç
            max_price_drops = 20  # –ú–∞–∫—Å–∏–º—É–º —Å–Ω–∏–∂–µ–Ω–∏–π —Ü–µ–Ω—ã
            price_drops = 0
            
            while price_drops < max_price_drops:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏ –ø–æ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–µ
                winner = self._find_first_buyer(selected_product)
                
                if winner:
                    # –ï—Å—Ç—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—å! –ü—Ä–æ–¥–∞–µ–º —Ç–æ–≤–∞—Ä
                    profit = winner.buy_product(selected_product, selected_product.current_price)
                    selected_product.sell_one()
                    
                    current_game.current_round += 1
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ –∏–≥—Ä—ã
                    game_over, message = self._check_game_over()
                    if game_over:
                        current_game.status = 'finished'
                        current_game.end_time = datetime.now()
                    
                    return {
                        'success': True,
                        'round': current_game.current_round - 1,
                        'current_lot': selected_product.to_dict(),
                        'winner': {
                            'id': winner.id,
                            'name': winner.name,
                            'purchase_price': selected_product.current_price,
                            'profit': profit
                        },
                        'message': f'{winner.name} –∫—É–ø–∏–ª {selected_product.name} –∑–∞ {selected_product.current_price:,} ‚ÇΩ',
                        'game_over': game_over,
                        'game_over_message': message
                    }
                else:
                    # –ù–∏–∫—Ç–æ –Ω–µ –∫—É–ø–∏–ª - —Å–Ω–∏–∂–∞–µ–º —Ü–µ–Ω—É (–ì–û–õ–õ–ê–ù–î–°–ö–ò–ô –ê–£–ö–¶–ò–û–ù!)
                    old_price = selected_product.current_price
                    selected_product.reduce_price(1 - self.price_reduction_step)
                    price_drops += 1
                    
                    # –ï—Å–ª–∏ —Ü–µ–Ω–∞ –¥–æ—Å—Ç–∏–≥–ª–∞ –º–∏–Ω–∏–º—É–º–∞ (—Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏), –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º
                    if selected_product.current_price <= selected_product.cost:
                        selected_product.current_price = selected_product.cost
                        break
            
            # –ï—Å–ª–∏ –Ω–∏–∫—Ç–æ –Ω–µ –∫—É–ø–∏–ª –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Å–Ω–∏–∂–µ–Ω–∏–π - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–≤–∞—Ä
            return {
                'success': True,
                'round': current_game.current_round,
                'current_lot': selected_product.to_dict(),
                'winner': None,
                'message': f'–¢–æ–≤–∞—Ä {selected_product.name} –Ω–µ –ø—Ä–æ–¥–∞–Ω. –¶–µ–Ω–∞ —Å–Ω–∏–∂–µ–Ω–∞ –¥–æ {selected_product.current_price:,} ‚ÇΩ',
                'game_over': False
            }
                
        except Exception as e:
            return {
                'success': False,
                'message': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ —Ä–∞—É–Ω–¥–∞: {str(e)}'
            }
    
    def _find_first_buyer(self, product):
        """–ù–∞—Ö–æ–¥–∏—Ç –ø–µ—Ä–≤–æ–≥–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è"""
        global players
        
        active_players = [p for p in players if p.balance > 0]
        players_with_preference = []
        
        for player in active_players:
            if player.can_buy(product.current_price):
                preference_multiplier = player.get_preference_multiplier(product.name)
                random_factor = random.uniform(0.1, 1.0)
                purchase_probability = preference_multiplier * random_factor
                players_with_preference.append((player, purchase_probability))
        
        if not players_with_preference:
            return None
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø–æ–∫—É–ø–∫–∏
        players_with_preference.sort(key=lambda x: x[1], reverse=True)
        
        # –í—ã–±–∏—Ä–∞–µ–º –∏–≥—Ä–æ–∫–∞
        if len(players_with_preference) > 1:
            top_players = players_with_preference[:min(3, len(players_with_preference))]
            if random.random() < 0.7:
                return top_players[0][0]
            else:
                return random.choice(top_players)[0]
        else:
            return players_with_preference[0][0]
    
    def _check_game_over(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã"""
        global products, players
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–≤–∞—Ä—ã
        available_products = [p for p in products if p.is_available()]
        if len(available_products) == 0:
            return True, "–í—Å–µ —Ç–æ–≤–∞—Ä—ã –ø—Ä–æ–¥–∞–Ω—ã!"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
        active_players = [p for p in players if p.balance > 0]
        
        if len(active_players) <= 1:
            if len(active_players) == 1:
                return True, f"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –∏–≥—Ä—ã: {active_players[0].name}!"
            else:
                return True, "–£ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –¥–µ–Ω—å–≥–∏!"
        
        return False, ""
    
    def get_game_statistics(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä—ã"""
        global players, current_game
        
        try:
            sorted_players = sorted(players, key=lambda p: p.total_profit, reverse=True)
            
            total_profit = sum(p.total_profit for p in players)
            total_purchases = sum(p.purchases for p in players)
            best_player = sorted_players[0] if sorted_players else None
            
            return {
                'players': [p.to_dict() for p in sorted_players],
                'total_profit': total_profit,
                'total_purchases': total_purchases,
                'best_player': best_player.name if best_player else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
                'game_info': current_game.to_dict() if current_game else None
            }
        except Exception as e:
            return {
                'success': False,
                'message': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}'
            }
    
    def reset_game(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏–≥—Ä—É"""
        global current_game, players, products
        
        try:
            if current_game:
                current_game.status = 'finished'
                current_game.end_time = datetime.now()
            
            reset_all_players()
            reset_all_products()
            
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –∏–≥—Ä—ã: {e}")
            return False

# ============================================================================
# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
# ============================================================================

# –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫ –∞—É–∫—Ü–∏–æ–Ω–∞
auction_engine = DutchAuctionEngine()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
create_initial_data()

# ============================================================================
# –ú–ê–†–®–†–£–¢–´ –°–¢–†–ê–ù–ò–¶
# ============================================================================

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return render_template('index.html')

@app.route('/game')
def game():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–≥—Ä—ã"""
    return render_template('game.html')

@app.route('/statistics')
def statistics():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    return render_template('statistics.html')

# ============================================================================
# API ENDPOINTS
# ============================================================================

@app.route('/api/set-player-name', methods=['POST'])
def set_player_name():
    """API endpoint –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    global players
    
    try:
        data = request.get_json()
        name = data.get('name', '').strip()
        
        if not name:
            return jsonify({
                'success': False,
                'message': '–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'
            }), 400
        
        # –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if not players:
            create_initial_data()
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–º—è
        for player in players:
            if player.is_user:
                player.name = name
                break
        
        return jsonify({
            'success': True,
            'message': f'–ò–º—è "{name}" —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!'
        })
        
    except Exception as e:
        return jsonify({
            'success': False,
            'message': f'–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'
        }), 500

@app.route('/api/game/start', methods=['POST'])
def start_game():
    """–ù–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—É—é –∏–≥—Ä—É"""
    try:
        session_id = str(uuid.uuid4())
        session['user_session_id'] = session_id
        
        success = auction_engine.start_new_game(session_id)
        
        if success:
            user_player = get_user_player(session_id)
            return jsonify({
                'success': True,
                'message': '–ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞—Ç–∞!',
                'user_data': user_player.to_dict() if user_player else None
            })
        else:
            return jsonify({
                'success': False,
                'message': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã'
            }), 500
            
    except Exception as e:
        return jsonify({
            'success': False,
            'message': f'–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'
        }), 500

@app.route('/api/game/next-round', methods=['POST'])
def next_round():
    """–°–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥"""
    try:
        result = auction_engine.conduct_dutch_auction_round()
        return jsonify(result)
    except Exception as e:
        return jsonify({
            'success': False,
            'message': f'–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'
        }), 500

@app.route('/api/game/status')
def game_status():
    """–°—Ç–∞—Ç—É—Å –∏–≥—Ä—ã"""
    try:
        game_state = auction_engine.get_current_game_state()
        return jsonify(game_state)
    except Exception as e:
        return jsonify({
            'success': False,
            'message': f'–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'
        }), 500

@app.route('/api/game/statistics')
def game_statistics():
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä—ã"""
    try:
        stats = auction_engine.get_game_statistics()
        return jsonify(stats)
    except Exception as e:
        return jsonify({
            'success': False,
            'message': f'–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'
        }), 500

@app.route('/api/game/reset', methods=['POST'])
def reset_game():
    """–°–±—Ä–æ—Å –∏–≥—Ä—ã"""
    try:
        success = auction_engine.reset_game()
        if success:
            return jsonify({
                'success': True,
                'message': '–ò–≥—Ä–∞ —Å–±—Ä–æ—à–µ–Ω–∞!'
            })
        else:
            return jsonify({
                'success': False,
                'message': '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –∏–≥—Ä—ã'
            }), 500
    except Exception as e:
        return jsonify({
            'success': False,
            'message': f'–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'
        }), 500

@app.route('/api/user/buy', methods=['POST'])
def buy_product():
    """–ü–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    try:
        data = request.get_json()
        product_id = data.get('product_id')
        session_id = session.get('user_session_id')
        
        if not product_id:
            return jsonify({
                'success': False,
                'message': 'ID —Ç–æ–≤–∞—Ä–∞ –Ω–µ —É–∫–∞–∑–∞–Ω'
            }), 400
        
        if not session_id:
            return jsonify({
                'success': False,
                'message': '–°–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
            }), 400
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–æ–≤–∞—Ä
        user_player = get_user_player(session_id)
        if not user_player:
            return jsonify({
                'success': False,
                'message': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-–∏–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω'
            }), 404
        
        product = next((p for p in products if p.id == product_id), None)
        if not product:
            return jsonify({
                'success': False,
                'message': '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'
            }), 404
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        if not user_player.can_buy(product.current_price):
            return jsonify({
                'success': False,
                'message': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏'
            }), 400
        
        # –ü–æ–∫—É–ø–∞–µ–º —Ç–æ–≤–∞—Ä
        profit = user_player.buy_product(product, product.current_price)
        product.sell_one()
        
        return jsonify({
            'success': True,
            'message': f'–¢–æ–≤–∞—Ä {product.name} –∫—É–ø–ª–µ–Ω –∑–∞ {product.current_price:,} ‚ÇΩ',
            'user_data': user_player.to_dict(),
            'profit': profit
        })
        
    except Exception as e:
        return jsonify({
            'success': False,
            'message': f'–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'
        }), 500

@app.route('/api/user/data')
def get_user_data():
    """–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        session_id = session.get('user_session_id')
        
        if not session_id:
            return jsonify({
                'success': False,
                'message': '–°–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
            })
        
        user_player = get_user_player(session_id)
        
        if not user_player:
            return jsonify({
                'success': False,
                'message': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-–∏–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω'
            })
        
        return jsonify({
            'success': True,
            'user_data': user_player.to_dict()
        })
        
    except Exception as e:
        return jsonify({
            'success': False,
            'message': f'–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'
        }), 500

# ============================================================================
# –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
# ============================================================================

if __name__ == '__main__':
    print("=" * 60)
    print("üî• –ì–û–õ–õ–ê–ù–î–°–ö–ò–ô –ê–£–ö–¶–ò–û–ù GOLAN üî•")
    print("=" * 60)
    print()
    print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...")
    print("üì± –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä: http://localhost:5000")
    print("‚èπÔ∏è  –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    print()
    
    try:
        app.run(debug=True, host='0.0.0.0', port=5000)
    except KeyboardInterrupt:
        print("\nüëã –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
