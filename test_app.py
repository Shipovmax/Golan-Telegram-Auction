# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""

import os
import sys

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_imports():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç—ã –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã...")
    
    try:
        from config import config
        print("‚úÖ config.py - OK")
    except Exception as e:
        print(f"‚ùå config.py - –û—à–∏–±–∫–∞: {e}")
        return False
    
    try:
        from database import db, Player, Product, Game
        print("‚úÖ database.py - OK")
    except Exception as e:
        print(f"‚ùå database.py - –û—à–∏–±–∫–∞: {e}")
        return False
    
    try:
        from dutch_auction_engine import DutchAuctionEngine
        print("‚úÖ dutch_auction_engine.py - OK")
    except Exception as e:
        print(f"‚ùå dutch_auction_engine.py - –û—à–∏–±–∫–∞: {e}")
        return False
    
    try:
        from app import app
        print("‚úÖ app.py - OK")
    except Exception as e:
        print(f"‚ùå app.py - –û—à–∏–±–∫–∞: {e}")
        return False
    
    return True

def test_dutch_auction_logic():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É –≥–æ–ª–ª–∞–Ω–¥—Å–∫–æ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞"""
    print("\nüéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –≥–æ–ª–ª–∞–Ω–¥—Å–∫–æ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞...")
    
    try:
        from dutch_auction_engine import DutchAuctionEngine
        
        # –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫
        engine = DutchAuctionEngine()
        print("‚úÖ –î–≤–∏–∂–æ–∫ –≥–æ–ª–ª–∞–Ω–¥—Å–∫–æ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞ —Å–æ–∑–¥–∞–Ω")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
        success = engine.start_new_game()
        if success:
            print("‚úÖ –ù–æ–≤–∞—è –∏–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã")
            return False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
        game_state = engine.get_current_game_state()
        if game_state and 'game' in game_state:
            print("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –ø–æ–ª—É—á–µ–Ω–æ")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã")
            return False
        
        print("‚úÖ –õ–æ–≥–∏–∫–∞ –≥–æ–ª–ª–∞–Ω–¥—Å–∫–æ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ª–æ–≥–∏–∫–µ –∞—É–∫—Ü–∏–æ–Ω–∞: {e}")
        return False

def test_database_models():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–æ–¥–µ–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüóÑÔ∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        from database import Player, Product, Game
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
        player = Player(
            name="–¢–µ—Å—Ç–æ–≤—ã–π –∏–≥—Ä–æ–∫",
            balance=100000,
            initial_balance=100000,
            wants="–†–æ–∑—ã",
            no_wants="–ü–∏–æ–Ω—ã"
        )
        print("‚úÖ –ú–æ–¥–µ–ª—å Player —Å–æ–∑–¥–∞–Ω–∞")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥—ã –∏–≥—Ä–æ–∫–∞
        can_buy = player.can_buy(50000)
        multiplier = player.get_preference_multiplier("–†–æ–∑—ã")
        print(f"‚úÖ –ú–µ—Ç–æ–¥—ã Player —Ä–∞–±–æ—Ç–∞—é—Ç (–º–æ–∂–µ—Ç –∫—É–ø–∏—Ç—å –∑–∞ 50k: {can_buy}, –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è —Ä–æ–∑: {multiplier})")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        product = Product(
            name="–¢–µ—Å—Ç–æ–≤—ã–µ —Ä–æ–∑—ã",
            cost=30000,
            initial_price=50000,
            current_price=50000,
            quantity=100,
            initial_quantity=100
        )
        print("‚úÖ –ú–æ–¥–µ–ª—å Product —Å–æ–∑–¥–∞–Ω–∞")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥—ã —Ç–æ–≤–∞—Ä–∞
        is_available = product.is_available()
        print(f"‚úÖ –ú–µ—Ç–æ–¥—ã Product —Ä–∞–±–æ—Ç–∞—é—Ç (–¥–æ—Å—Ç—É–ø–µ–Ω: {is_available})")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –º–æ–¥–µ–ª—è—Ö –ë–î: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("=" * 60)
    print("           –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø")
    print("           –ì–æ–ª–ª–∞–Ω–¥—Å–∫–∏–π –∞—É–∫—Ü–∏–æ–Ω Golan")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã
    if not test_imports():
        print("\n‚ùå –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω!")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –ë–î
    if not test_database_models():
        print("\n‚ùå –¢–µ—Å—Ç –º–æ–¥–µ–ª–µ–π –ë–î –Ω–µ –ø—Ä–æ–π–¥–µ–Ω!")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∞—É–∫—Ü–∏–æ–Ω–∞
    if not test_dutch_auction_logic():
        print("\n‚ùå –¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –∞—É–∫—Ü–∏–æ–Ω–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω!")
        return
    
    print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    print("üí° –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –∑–∞–ø—É—Å–∫—É: python run.py")

if __name__ == '__main__':
    main()
