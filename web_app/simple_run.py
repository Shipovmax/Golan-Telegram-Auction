# -*- coding: utf-8 -*-
"""
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–∞
–ë–ï–ó –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π - —Ç–æ–ª—å–∫–æ Flask
"""

import os
import sys

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

try:
    from flask import Flask, render_template, request, jsonify
    import random
    from datetime import datetime
    from typing import List, Dict, Optional, Tuple
    from dataclasses import dataclass
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Flask: pip install Flask")
    sys.exit(1)

# –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)
app.secret_key = 'golan-auction-secret-key'

# –ü—Ä–æ—Å—Ç—ã–µ –º–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö (–±–µ–∑ dataclass –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
class Player:
    def __init__(self, id, name, balance, wants, no_wants):
        self.id = id
        self.name = name
        self.balance = balance
        self.initial_balance = balance
        self.wants = wants
        self.no_wants = no_wants
        self.total_profit = 0
        self.purchases = 0
        self.sales = 0
    
    def can_bid(self, amount):
        return self.balance >= amount
    
    def get_preference_multiplier(self, product_name):
        if product_name == self.wants:
            return 1.5
        elif product_name == self.no_wants:
            return 0.3
        else:
            return 1.0
    
    def calculate_bid(self, base_price, product_name):
        multiplier = self.get_preference_multiplier(product_name)
        random_factor = random.uniform(0.8, 1.3)
        bid = int(base_price * multiplier * random_factor)
        
        if self.can_bid(bid):
            return bid
        else:
            return 0
    
    def make_purchase(self, purchase_price, market_price):
        # –í –≥–æ–ª–ª–∞–Ω–¥—Å–∫–æ–º –∞—É–∫—Ü–∏–æ–Ω–µ –ø–æ–∫—É–ø–∞–µ–º –ø–æ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–µ
        self.balance -= purchase_price
        self.purchases += 1
        
        # –ü—Ä–∏–±—ã–ª—å = —Ä—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞ - —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ (–µ—Å–ª–∏ –ø—Ä–æ–¥–∞–µ–º –ø–æ —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω–µ)
        profit = market_price - purchase_price
        self.balance += market_price  # –ü–æ–ª—É—á–∞–µ–º —Ä—ã–Ω–æ—á–Ω—É—é —Ü–µ–Ω—É –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ
        self.total_profit += profit
        self.sales += 1
        
        return profit

class Product:
    def __init__(self, id, name, cost, price, quantity):
        self.id = id
        self.name = name
        self.cost = cost
        self.price = price
        self.initial_price = price
        self.quantity = quantity
        self.initial_quantity = quantity
    
    def is_available(self):
        return self.quantity > 0
    
    def reduce_price(self, ratio=0.9):
        self.price = int(self.price * ratio)
    
    def sell_one(self):
        if self.is_available():
            self.quantity -= 1
            return True
        return False

class Bid:
    def __init__(self, player_id, player_name, amount):
        self.player_id = player_id
        self.player_name = player_name
        self.amount = amount
        self.timestamp = datetime.now()

class GameData:
    def __init__(self):
        self.players = self._create_players()
        self.products = self._create_products()
        self.game_state = {
            'id': None,
            'round': 0,
            'status': 'waiting',
            'current_lot': None,
            'bids': {},
            'winner': None
        }
    
    def _create_players(self):
        players_data = [
            {"id": 1, "name": "–í–∞–Ω—è", "balance": 150000, "wants": "–ü–∏–æ–Ω—ã", "no_wants": "–†–æ–∑—ã"},
            {"id": 2, "name": "–ê–Ω–∞—Å—Ç–∞—Å–∏—è", "balance": 280000, "wants": "–†–æ–∑—ã", "no_wants": "–ü–∏–æ–Ω—ã"},
            {"id": 3, "name": "–ò–≥–æ—Ä—å", "balance": 200000, "wants": "–û—Ä—Ö–∏–¥–µ–∏", "no_wants": "–†–æ–º–∞—à–∫–∏"},
            {"id": 4, "name": "–ú–∞—Ä–∏–Ω–∞", "balance": 120000, "wants": "–¢—é–ª—å–ø–∞–Ω—ã", "no_wants": "–ì–µ–æ—Ä–≥–∏–Ω—ã"},
            {"id": 5, "name": "–î–º–∏—Ç—Ä–∏–π", "balance": 300000, "wants": "–õ–∞–≤–∞–Ω–¥–∞", "no_wants": "–õ–∏–ª–∏–∏"},
            {"id": 6, "name": "–°–≤–µ—Ç–ª–∞–Ω–∞", "balance": 175000, "wants": "–ò—Ä–∏—Å—ã", "no_wants": "–ì–≤–æ–∑–¥–∏–∫–∏"}
        ]
        
        return [Player(**p) for p in players_data]
    
    def _create_products(self):
        products_data = [
            {"id": 1, "name": "–†–æ–∑—ã", "cost": 50000, "price": 80000, "quantity": 300},
            {"id": 2, "name": "–ü–∏–æ–Ω—ã", "cost": 85000, "price": 150000, "quantity": 100},
            {"id": 3, "name": "–ì–µ–æ—Ä–≥–∏–Ω—ã", "cost": 30000, "price": 50000, "quantity": 80},
            {"id": 4, "name": "–†–æ–º–∞—à–∫–∏", "cost": 100000, "price": 130000, "quantity": 500},
            {"id": 5, "name": "–õ–∏–ª–∏–∏", "cost": 60000, "price": 95000, "quantity": 200},
            {"id": 6, "name": "–¢—é–ª—å–ø–∞–Ω—ã", "cost": 40000, "price": 65000, "quantity": 350},
            {"id": 7, "name": "–û—Ä—Ö–∏–¥–µ–∏", "cost": 120000, "price": 200000, "quantity": 60},
            {"id": 8, "name": "–•—Ä–∏–∑–∞–Ω—Ç–µ–º—ã", "cost": 45000, "price": 70000, "quantity": 250},
            {"id": 9, "name": "–õ–∞–≤–∞–Ω–¥–∞", "cost": 20000, "price": 35000, "quantity": 400},
            {"id": 10, "name": "–ù–∞—Ä—Ü–∏—Å—Å—ã", "cost": 55000, "price": 90000, "quantity": 150},
            {"id": 11, "name": "–ò—Ä–∏—Å—ã", "cost": 70000, "price": 115000, "quantity": 120},
            {"id": 12, "name": "–ì–≤–æ–∑–¥–∏–∫–∏", "cost": 25000, "price": 45000, "quantity": 300}
        ]
        
        return [Product(**p) for p in products_data]
    
    def reset_game(self):
        for player in self.players:
            player.balance = player.initial_balance
            player.total_profit = 0
            player.purchases = 0
            player.sales = 0
        
        for product in self.products:
            product.price = product.initial_price
            product.quantity = product.initial_quantity
        
        self.game_state = {
            'id': random.randint(1000, 9999),
            'round': 0,
            'status': 'waiting',
            'current_lot': None,
            'bids': {},
            'winner': None
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã
game_data = GameData()

# –ú–∞—Ä—à—Ä—É—Ç—ã Flask
@app.route('/')
def index():
    return render_template('index.html')

@app.route('/game')
def game():
    return render_template('game.html')

@app.route('/statistics')
def statistics():
    return render_template('statistics.html')

@app.route('/api/game/start', methods=['POST'])
def start_game():
    try:
        game_data.reset_game()
        game_data.game_state['status'] = 'playing'
        game_data.game_state['round'] = 1
        
        return jsonify({
            'success': True,
            'game_id': game_data.game_state['id'],
            'message': '–ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞—Ç–∞!'
        })
    except Exception as e:
        return jsonify({
            'success': False,
            'message': f'–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'
        }), 500

@app.route('/api/game/status')
def get_game_status():
    try:
        return jsonify({
            'game': game_data.game_state,
            'players': [
                {
                    'id': p.id,
                    'name': p.name,
                    'balance': p.balance,
                    'total_profit': p.total_profit,
                    'purchases': p.purchases,
                    'sales': p.sales
                } for p in game_data.players
            ],
            'products': [
                {
                    'id': p.id,
                    'name': p.name,
                    'cost': p.cost,
                    'price': p.price,
                    'quantity': p.quantity
                } for p in game_data.products
            ]
        })
    except Exception as e:
        return jsonify({
            'success': False,
            'message': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}'
        }), 500

@app.route('/api/game/next-round', methods=['POST'])
def next_round():
    try:
        if game_data.game_state['status'] != 'playing':
            return jsonify({
                'success': False,
                'message': '–ò–≥—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É.'
            }), 400
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ç–æ–≤–∞—Ä
        available_products = [p for p in game_data.products if p.is_available()]
        if not available_products:
            game_data.game_state['status'] = 'finished'
            return jsonify({
                'success': False,
                'message': '–í—Å–µ —Ç–æ–≤–∞—Ä—ã –ø—Ä–æ–¥–∞–Ω—ã!',
                'game_over': True
            })
        
        current_lot = random.choice(available_products)
        game_data.game_state['current_lot'] = current_lot
        
        # –ì–û–õ–õ–ê–ù–î–°–ö–ò–ô –ê–£–ö–¶–ò–û–ù: –°–Ω–∏–∂–∞–µ–º —Ü–µ–Ω—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∫—Ç–æ –≥–æ—Ç–æ–≤ –∫—É–ø–∏—Ç—å
        current_lot.reduce_price(0.95)  # –°–Ω–∏–∂–∞–µ–º –Ω–∞ 5%
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫—Ç–æ –∏–∑ –∏–≥—Ä–æ–∫–æ–≤ –≥–æ—Ç–æ–≤ –∫—É–ø–∏—Ç—å –ø–æ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–µ
        buyers = []
        for player in game_data.players:
            if player.balance <= 0:
                continue
            
            # –ò–≥—Ä–æ–∫ –≥–æ—Ç–æ–≤ –∫—É–ø–∏—Ç—å, –µ—Å–ª–∏ —Ü–µ–Ω–∞ —Å—Ç–∞–ª–∞ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–π –¥–ª—è –Ω–µ–≥–æ
            # –£—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: –ª—é–±–∏–º—ã–µ —Ç–æ–≤–∞—Ä—ã –ø–æ–∫—É–ø–∞–µ–º —Ä–∞–Ω—å—à–µ, –Ω–µ–ª—é–±–∏–º—ã–µ - –ø–æ–∑–∂–µ
            if player.get_preference_multiplier(current_lot.name) >= 1.0:  # –õ—é–±–∏—Ç –∏–ª–∏ –Ω–µ–π—Ç—Ä–∞–ª–µ–Ω
                if current_lot.price <= player.balance * 0.8:  # –ú–æ–∂–µ—Ç –ø–æ–∑–≤–æ–ª–∏—Ç—å —Å–µ–±–µ
                    buyers.append({
                        'player_id': player.id,
                        'player_name': player.name,
                        'price': current_lot.price
                    })
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏, –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ (–∏–ª–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ)
        if buyers:
            buyer = random.choice(buyers)  # –°–ª—É—á–∞–π–Ω—ã–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –∏–∑ –≥–æ—Ç–æ–≤—ã—Ö
            winner_player = next(p for p in game_data.players if p.id == buyer['player_id'])
            
            # –ü–æ–∫—É–ø–∞–µ–º –ø–æ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–µ, –ø—Ä–æ–¥–∞–µ–º –ø–æ —Ä—ã–Ω–æ—á–Ω–æ–π (—Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å + –Ω–∞—Ü–µ–Ω–∫–∞)
            market_price = current_lot.cost + int(current_lot.cost * 0.3)  # 30% –Ω–∞—Ü–µ–Ω–∫–∞
            profit = winner_player.make_purchase(current_lot.price, market_price)
            current_lot.sell_one()
            
            result = {
                'winner_name': buyer['player_name'],
                'winning_bid': current_lot.price,
                'selling_price': market_price,
                'profit': profit,
                'remaining_quantity': current_lot.quantity
            }
            
            game_data.game_state['round'] += 1
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ –∏–≥—Ä—ã
            active_players = [p for p in game_data.players if p.balance > 0]
            if len(active_players) <= 1:
                game_data.game_state['status'] = 'finished'
                if len(active_players) == 1:
                    game_data.game_state['winner'] = active_players[0].name
            
            return jsonify({
                'success': True,
                'round': game_data.game_state['round'],
                'current_lot': {
                    'id': current_lot.id,
                    'name': current_lot.name,
                    'price': current_lot.price,
                    'quantity': current_lot.quantity,
                    'cost': current_lot.cost
                },
                'bids': {buyer['player_id']: {'player_name': buyer['player_name'], 'amount': buyer['price']}},
                'result': result,
                'message': f'{buyer["player_name"]} –∫—É–ø–∏–ª {current_lot.name} –∑–∞ {current_lot.price:,} ‚ÇΩ',
                'game_over': game_data.game_state['status'] == 'finished'
            })
        else:
            # –ù–∏–∫—Ç–æ –Ω–µ –≥–æ—Ç–æ–≤ –∫—É–ø–∏—Ç—å - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–Ω–∏–∂–∞—Ç—å —Ü–µ–Ω—É
            return jsonify({
                'success': True,
                'current_lot': {
                    'id': current_lot.id,
                    'name': current_lot.name,
                    'price': current_lot.price,
                    'quantity': current_lot.quantity,
                    'cost': current_lot.cost
                },
                'bids': {},
                'result': None,
                'message': f'–¶–µ–Ω–∞ —Å–Ω–∏–∂–µ–Ω–∞ –¥–æ {current_lot.price:,} ‚ÇΩ. –ö—Ç–æ –≥–æ—Ç–æ–≤ –∫—É–ø–∏—Ç—å?',
                'game_over': False
            })
            
    except Exception as e:
        return jsonify({
            'success': False,
            'message': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ —Ä–∞—É–Ω–¥–∞: {str(e)}'
        }), 500

@app.route('/api/statistics')
def get_statistics():
    try:
        sorted_players = sorted(game_data.players, key=lambda x: x.total_profit, reverse=True)
        total_profit = sum(p.total_profit for p in game_data.players)
        total_purchases = sum(p.purchases for p in game_data.players)
        best_player = max(game_data.players, key=lambda x: x.total_profit) if game_data.players else None
        
        return jsonify({
            'players': [
                {
                    'id': p.id,
                    'name': p.name,
                    'balance': p.balance,
                    'total_profit': p.total_profit,
                    'purchases': p.purchases,
                    'sales': p.sales
                } for p in sorted_players
            ],
            'total_profit': total_profit,
            'total_purchases': total_purchases,
            'best_player': best_player.name if best_player else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
            'game_info': game_data.game_state
        })
    except Exception as e:
        return jsonify({
            'success': False,
            'message': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}'
        }), 500

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    print("=" * 60)
    print("           –ê–£–ö–¶–ò–û–ù –¶–í–ï–¢–û–í GOLAN")
    print("           –ü—Ä–æ—Å—Ç–æ–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
    print("=" * 60)
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —à–∞–±–ª–æ–Ω–æ–≤
    if not os.path.exists('templates'):
        print("‚ùå –ü–∞–ø–∫–∞ templates –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∑–∞–ø—É—Å–∫–∞–µ—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –ø–∞–ø–∫–∏ web_app")
        return
    
    print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã!")
    print()
    print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...")
    print("üì± –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:5000")
    print("‚èπÔ∏è  –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    print()
    
    try:
        app.run(debug=True, host='0.0.0.0', port=5000)
    except KeyboardInterrupt:
        print("\nüëã –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")

if __name__ == '__main__':
    main()
