from aiogram import Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from bot import storage, auction, players, products
import logging

git config --global user.email "you@example.com"
  git config --global user.name "Your Name"

logger = logging.getLogger(__name__)

def register_handlers(dp: Dispatcher, bot):
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è handler'–æ–≤
    dp.register_message_handler(cmd_start, commands=["start"])
    dp.register_callback_query_handler(callback_query_handler)

async def cmd_start(message: types.Message):
    """
    /start ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    """
    # –°–æ–∑–¥–∞–¥–∏–º/–æ–±–Ω–æ–≤–∏–º –∏–≥—Ä–æ–∫–∞ –≤ –ë–î (id —Ç–µ–ª–µ–≥—Ä–∞–º-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    await storage.create_or_update_player(message.from_user.id, message.from_user.full_name, balance=100000, is_bot=False)
    text = f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!\n"
    # –ü–æ–ª—É—á–∏–º –±–∞–ª–∞–Ω—Å
    row = await storage.get_player(message.from_user.id)
    balance = row['balance'] if row else 0
    text += f"–ë–∞–ª–∞–Ω—Å: {balance}\n\n"
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(InlineKeyboardButton("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –∞—É–∫—Ü–∏–æ–Ω", callback_data="start_auction"))
    keyboard.add(InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"stat_{message.from_user.id}"))
    keyboard.add(InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤", callback_data="stat_all"))
    await message.answer(text, reply_markup=keyboard)

async def callback_query_handler(call: types.CallbackQuery):
    data = call.data
    # —Å—Ç–∞—Ä—Ç –∞—É–∫—Ü–∏–æ–Ω–∞ ‚Äî –≤—ã–±–µ—Ä–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç
    if data == "start_auction":
        # –î–ª—è –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞ ‚Äî –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –∏–∑ products.PRODUCTS
        if not products.PRODUCTS:
            await call.answer("–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–∞.")
            return
        product_code = list(products.PRODUCTS.keys())[0]
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∞—É–∫—Ü–∏–æ–Ω manager
        msg = await call.message.answer("–ó–∞–ø—É—Å–∫ –∞—É–∫—Ü–∏–æ–Ω–∞... –ü–æ–¥–æ–∂–¥–∏—Ç–µ")
        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –∞—É–∫—Ü–∏–æ–Ω
        auction_id = await auction.manager.start_new_auction(product_code, call.message.chat.id, msg)
        await call.answer("–ê—É–∫—Ü–∏–æ–Ω –∑–∞–ø—É—â–µ–Ω")
        return

    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ ‚Äî —Ñ–æ—Ä–º–∞—Ç buy_<auction_id>
    if data and data.startswith("buy_"):
        try:
            auction_id = int(data.split("_", 1)[1])
        except Exception:
            await call.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π auction id")
            return
        res = await auction.manager.handle_user_buy(auction_id, call.from_user.id)
        if res.get('ok'):
            await call.message.answer(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∫—É–ø–∏–ª–∏ —Ç–æ–≤–∞—Ä. –ü—Ä–∏–±—ã–ª—å: {res.get('profit')}")
            await call.answer()
        else:
            await call.answer(f"–ü–æ–∫—É–ø–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: {res.get('reason')}")
        return

    # continue / exit
    if data and data.startswith("cont_"):
        await call.answer("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º ‚Äî —Ü–µ–Ω–∞ –∏–∑–º–µ–Ω–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")
        return
    if data and data.startswith("exit_"):
        await call.message.delete()
        await call.answer("–í—ã—Ö–æ–¥ –≤ –º–µ–Ω—é")
        return

    # —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    if data and data.startswith("stat_"):
        pid = int(data.split("_",1)[1])
        purchases = await storage.get_player_purchases(pid)
        text = f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞ {pid}:\n"
        if not purchases:
            text += "–ù–µ—Ç –ø–æ–∫—É–ø–æ–∫"
        else:
            for p in purchases:
                text += f"- Product {p['product_id']} | price {p['buy_price']} | profit {p['profit']}\n"
        await call.message.answer(text)
        await call.answer()
        return
