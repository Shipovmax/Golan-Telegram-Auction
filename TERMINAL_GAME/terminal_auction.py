#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import random
import time
import os
import sys
from typing import List, Dict, Optional
from dataclasses import dataclass
from datetime import datetime

# –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
class Colors:
    RED = '\033[91m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    PURPLE = '\033[95m'
    CYAN = '\033[96m'
    WHITE = '\033[97m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'
    END = '\033[0m'

@dataclass
class Product:
    """–¢–æ–≤–∞—Ä –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–∞"""
    id: int
    name: str
    quantity: int
    start_price: int
    current_price: int
    cost: int
    description: str

@dataclass
class Player:
    """–ò–≥—Ä–æ–∫"""
    name: str
    balance: int
    total_profit: int
    purchases: int
    wants: str  # –õ—é–±–∏–º—ã–π —Ç–æ–≤–∞—Ä
    no_wants: str  # –ù–µ–ª—é–±–∏–º—ã–π —Ç–æ–≤–∞—Ä

class DutchAuctionGame:
    """–ì–æ–ª–ª–∞–Ω–¥—Å–∫–∏–π –∞—É–∫—Ü–∏–æ–Ω - –∫–æ–Ω—Å–æ–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã"""
        self.products = self._create_products()
        self.players = self._create_players()
        self.current_round = 0
        self.current_product = None
        self.game_active = False
        self.user_player = None
        
    def _create_products(self) -> List[Product]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–∞"""
        products = [
            Product(1, "üåπ –†–æ–∑—ã", 50, 15000, 15000, 8000, "–ö—Ä–∞—Å–Ω—ã–µ —Ä–æ–∑—ã - —Å–∏–º–≤–æ–ª –ª—é–±–≤–∏"),
            Product(2, "üåª –ü–æ–¥—Å–æ–ª–Ω—É—Ö–∏", 30, 8000, 8000, 4000, "–Ø—Ä–∫–∏–µ –ø–æ–¥—Å–æ–ª–Ω—É—Ö–∏"),
            Product(3, "üå∫ –û—Ä—Ö–∏–¥–µ–∏", 20, 25000, 25000, 12000, "–≠–∫–∑–æ—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ä—Ö–∏–¥–µ–∏"),
            Product(4, "üå∑ –¢—é–ª—å–ø–∞–Ω—ã", 40, 12000, 12000, 6000, "–í–µ—Å–µ–Ω–Ω–∏–µ —Ç—é–ª—å–ø–∞–Ω—ã"),
            Product(5, "üå∏ –°–∞–∫—É—Ä–∞", 15, 30000, 30000, 15000, "–¶–≤–µ—Ç—É—â–∞—è —Å–∞–∫—É—Ä–∞"),
            Product(6, "üåº –†–æ–º–∞—à–∫–∏", 60, 5000, 5000, 2500, "–ü—Ä–æ—Å—Ç—ã–µ —Ä–æ–º–∞—à–∫–∏"),
            Product(7, "üåø –õ–∞–≤–∞–Ω–¥–∞", 35, 10000, 10000, 5000, "–ê—Ä–æ–º–∞—Ç–Ω–∞—è –ª–∞–≤–∞–Ω–¥–∞"),
            Product(8, "üå∫ –ü–∏–æ–Ω—ã", 25, 18000, 18000, 9000, "–ü—ã—à–Ω—ã–µ –ø–∏–æ–Ω—ã"),
            Product(9, "üåª –ì–µ–æ—Ä–≥–∏–Ω—ã", 30, 14000, 14000, 7000, "–ö—Ä—É–ø–Ω—ã–µ –≥–µ–æ—Ä–≥–∏–Ω—ã"),
            Product(10, "üå∑ –ò—Ä–∏—Å—ã", 40, 11000, 11000, 5500, "–≠–ª–µ–≥–∞–Ω—Ç–Ω—ã–µ –∏—Ä–∏—Å—ã"),
            Product(11, "üåπ –ì–≤–æ–∑–¥–∏–∫–∏", 45, 9000, 9000, 4500, "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –≥–≤–æ–∑–¥–∏–∫–∏"),
            Product(12, "üå∫ –õ–∏–ª–∏–∏", 20, 20000, 20000, 10000, "–ë–µ–ª—ã–µ –ª–∏–ª–∏–∏")
        ]
        return products
    
    def _create_players(self) -> List[Player]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤"""
        players = [
            Player("–í–∞–Ω—è", 150000, 0, 0, "–ü–∏–æ–Ω—ã", "–†–æ–∑—ã"),
            Player("–ê–Ω–∞—Å—Ç–∞—Å–∏—è", 280000, 0, 0, "–†–æ–∑—ã", "–ü–∏–æ–Ω—ã"),
            Player("–ò–≥–æ—Ä—å", 200000, 0, 0, "–û—Ä—Ö–∏–¥–µ–∏", "–†–æ–º–∞—à–∫–∏"),
            Player("–ú–∞—Ä–∏–Ω–∞", 120000, 0, 0, "–¢—é–ª—å–ø–∞–Ω—ã", "–ì–µ–æ—Ä–≥–∏–Ω—ã"),
            Player("–î–º–∏—Ç—Ä–∏–π", 300000, 0, 0, "–õ–∞–≤–∞–Ω–¥–∞", "–õ–∏–ª–∏–∏"),
            Player("–°–≤–µ—Ç–ª–∞–Ω–∞", 175000, 0, 0, "–ò—Ä–∏—Å—ã", "–ì–≤–æ–∑–¥–∏–∫–∏")
        ]
        return players
    
    def create_user_player(self, name: str) -> Player:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–∏–≥—Ä–æ–∫–∞"""
        self.user_player = Player(name, 200000, 0, 0, "–†–æ–∑—ã", "–û—Ä—Ö–∏–¥–µ–∏")
        return self.user_player
    
    def start_new_round(self) -> bool:
        """–ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞"""
        if not self.products:
            return False
            
        self.current_round += 1
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ç–æ–≤–∞—Ä
        self.current_product = random.choice(self.products)
        self.current_product.current_price = self.current_product.start_price
        self.game_active = True
        
        return True
    
    def decrease_price(self, amount: int = 1000) -> bool:
        """–°–Ω–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞ (–≥–æ–ª–ª–∞–Ω–¥—Å–∫–∏–π –∞—É–∫—Ü–∏–æ–Ω)"""
        if not self.current_product or not self.game_active:
            return False
            
        self.current_product.current_price -= amount
        
        # –¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∏–∂–µ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏
        if self.current_product.current_price <= self.current_product.cost:
            self.current_product.current_price = self.current_product.cost
            return False
            
        return True
    
    def buy_product(self, player: Player) -> bool:
        """–ü–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–∞ –∏–≥—Ä–æ–∫–æ–º"""
        if not self.current_product or not self.game_active:
            return False
            
        if player.balance < self.current_product.current_price:
            return False
            
        # –ü–æ–∫—É–ø–∫–∞
        player.balance -= self.current_product.current_price
        profit_multiplier = 1.3  # 130% –ø—Ä–∏–±—ã–ª–∏
        profit = self.current_product.current_price * profit_multiplier
        player.total_profit += profit
        player.purchases += 1
        
        # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞
        self.current_product.quantity -= 1
        
        # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è, —É–¥–∞–ª—è–µ–º –µ–≥–æ
        if self.current_product.quantity <= 0:
            self.products.remove(self.current_product)
        
        self.game_active = False
        return True
    
    def get_ai_decision(self, player: Player) -> bool:
        """–ò–ò —Ä–µ—à–µ–Ω–∏–µ –æ –ø–æ–∫—É–ø–∫–µ"""
        if not self.current_product:
            return False
            
        # –ë–∞–∑–æ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
        can_afford = player.balance >= self.current_product.current_price
        good_price = self.current_product.current_price <= self.current_product.start_price * 0.7
        
        # –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞
        likes_product = player.wants.lower() in self.current_product.name.lower()
        dislikes_product = player.no_wants.lower() in self.current_product.name.lower()
        
        # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏
        buy_probability = 0.1  # –ë–∞–∑–æ–≤–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
        
        if can_afford:
            buy_probability += 0.3
        if good_price:
            buy_probability += 0.2
        if likes_product:
            buy_probability += 0.3
        if dislikes_product:
            buy_probability -= 0.2
            
        # –°–ª—É—á–∞–π–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
        return random.random() < buy_probability
    
    def format_money(self, amount: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–Ω–µ–≥"""
        return f"{amount:,} ‚ÇΩ"
    
    def clear_screen(self):
        """–û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞"""
        os.system('cls' if os.name == 'nt' else 'clear')
    
    def print_header(self):
        """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        print(f"{Colors.BOLD}{Colors.PURPLE}")
        print("=" * 60)
        print("üî• –ì–û–õ–õ–ê–ù–î–°–ö–ò–ô –ê–£–ö–¶–ò–û–ù GOLAN - –ö–û–ù–°–û–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø üî•")
        print("=" * 60)
        print(f"{Colors.END}")
    
    def print_player_info(self, player: Player):
        """–ü–µ—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–æ–∫–µ"""
        print(f"{Colors.CYAN}üë§ {player.name}{Colors.END}")
        print(f"   üí∞ –ë–∞–ª–∞–Ω—Å: {Colors.GREEN}{self.format_money(player.balance)}{Colors.END}")
        print(f"   üìà –ü—Ä–∏–±—ã–ª—å: {Colors.BLUE}{self.format_money(player.total_profit)}{Colors.END}")
        print(f"   üõí –ü–æ–∫—É–ø–∫–∏: {Colors.YELLOW}{player.purchases}{Colors.END}")
        print(f"   ‚ù§Ô∏è  –õ—é–±–∏—Ç: {Colors.RED}{player.wants}{Colors.END}")
        print(f"   üíî –ù–µ –ª—é–±–∏—Ç: {Colors.RED}{player.no_wants}{Colors.END}")
        print()
    
    def print_product_info(self):
        """–ü–µ—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ"""
        if not self.current_product:
            return
            
        print(f"{Colors.BOLD}{Colors.YELLOW}üíé –¢–ï–ö–£–©–ò–ô –õ–û–¢{Colors.END}")
        print(f"   üå∏ –¢–æ–≤–∞—Ä: {Colors.BOLD}{self.current_product.name}{Colors.END}")
        print(f"   üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {Colors.CYAN}{self.current_product.quantity} —à—Ç.{Colors.END}")
        print(f"   üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {Colors.GREEN}{self.format_money(self.current_product.current_price)}{Colors.END}")
        print(f"   üí∏ –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: {Colors.RED}{self.format_money(self.current_product.cost)}{Colors.END}")
        potential_profit = self.current_product.cost - self.current_product.current_price
        profit_color = Colors.GREEN if potential_profit >= 0 else Colors.RED
        profit_sign = "+" if potential_profit >= 0 else ""
        print(f"   üìà –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: {profit_color}{profit_sign}{self.format_money(potential_profit)}{Colors.END}")
        print(f"   üí° –ü—Ä–∏–±—ã–ª—å = –¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ √ó 1.3 (130%)")
        print(f"   üìù –û–ø–∏—Å–∞–Ω–∏–µ: {self.current_product.description}")
        print()
    
    def print_leaderboard(self):
        """–ü–µ—á–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤"""
        sorted_players = sorted(self.players + ([self.user_player] if self.user_player else []), 
                              key=lambda p: p.total_profit, reverse=True)
        
        print(f"{Colors.BOLD}{Colors.PURPLE}üèÜ –¢–ê–ë–õ–ò–¶–ê –õ–ò–î–ï–†–û–í{Colors.END}")
        print("-" * 50)
        for i, player in enumerate(sorted_players, 1):
            medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else f"{i}."
            profit_color = Colors.GREEN if player.total_profit >= 0 else Colors.RED
            profit_sign = "+" if player.total_profit >= 0 else ""
            print(f"{medal} {player.name}: {profit_color}{profit_sign}{self.format_money(player.total_profit)}{Colors.END}")
        print()
    
    def run_game(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∏–≥—Ä—ã"""
        self.clear_screen()
        self.print_header()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print(f"{Colors.CYAN}–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ì–æ–ª–ª–∞–Ω–¥—Å–∫–∏–π –ê—É–∫—Ü–∏–æ–Ω!{Colors.END}")
        user_name = input(f"{Colors.YELLOW}–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è: {Colors.END}").strip()
        if not user_name:
            user_name = "–ò–≥—Ä–æ–∫"
        
        self.create_user_player(user_name)
        
        print(f"\n{Colors.GREEN}–ü—Ä–∏–≤–µ—Ç, {user_name}! –£ –≤–∞—Å –µ—Å—Ç—å {self.format_money(self.user_player.balance)}{Colors.END}")
        input(f"{Colors.YELLOW}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã...{Colors.END}")
        
        round_count = 0
        max_rounds = 10
        
        while round_count < max_rounds and self.products:
            self.clear_screen()
            self.print_header()
            
            # –ù–∞—á–∞–ª–æ —Ä–∞—É–Ω–¥–∞
            if not self.start_new_round():
                break
                
            round_count += 1
            print(f"{Colors.BOLD}–†–∞—É–Ω–¥ {round_count}/{max_rounds}{Colors.END}\n")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
            self.print_product_info()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            print(f"{Colors.BOLD}–í–ê–® –ü–†–û–§–ò–õ–¨{Colors.END}")
            self.print_player_info(self.user_player)
            
            # –ê—É–∫—Ü–∏–æ–Ω
            auction_active = True
            price_decrease_count = 0
            
            while auction_active and self.current_product:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
                print(f"{Colors.BOLD}üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {Colors.GREEN}{self.format_money(self.current_product.current_price)}{Colors.END}")
                
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ—à–∞–µ—Ç
                print(f"\n{Colors.YELLOW}–í–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è:{Colors.END}")
                print("1. üõí –ö—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä")
                print("2. ‚è≥ –ñ–¥–∞—Ç—å —Å–Ω–∏–∂–µ–Ω–∏—è —Ü–µ–Ω—ã")
                print("3. üìä –ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤")
                print("4. ‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ä–∞—É–Ω–¥")
                
                choice = input(f"\n{Colors.CYAN}–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-4): {Colors.END}").strip()
                
                if choice == "1":
                    # –ü–æ–∫—É–ø–∫–∞
                    if self.buy_product(self.user_player):
                        print(f"\n{Colors.GREEN}üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∫—É–ø–∏–ª–∏ {self.current_product.name} –∑–∞ {self.format_money(self.current_product.current_price)}!{Colors.END}")
                        profit = self.current_product.cost - self.current_product.current_price
                        print(f"{Colors.BLUE}üí∞ –í–∞—à–∞ –ø—Ä–∏–±—ã–ª—å: {self.format_money(profit)}{Colors.END}")
                        auction_active = False
                    else:
                        print(f"\n{Colors.RED}‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!{Colors.END}")
                        
                elif choice == "2":
                    # –ñ–¥–µ–º —Å–Ω–∏–∂–µ–Ω–∏—è —Ü–µ–Ω—ã
                    if self.decrease_price():
                        print(f"\n{Colors.YELLOW}‚è≥ –¶–µ–Ω–∞ —Å–Ω–∏–∂–∞–µ—Ç—Å—è...{Colors.END}")
                        price_decrease_count += 1
                        
                        # –ò–ò –∏–≥—Ä–æ–∫–∏ –º–æ–≥—É—Ç –∫—É–ø–∏—Ç—å
                        for player in self.players:
                            if self.get_ai_decision(player) and self.buy_product(player):
                                print(f"{Colors.CYAN}ü§ñ {player.name} –∫—É–ø–∏–ª —Ç–æ–≤–∞—Ä!{Colors.END}")
                                auction_active = False
                                break
                    else:
                        print(f"\n{Colors.RED}‚ùå –¶–µ–Ω–∞ –¥–æ—Å—Ç–∏–≥–ª–∞ –º–∏–Ω–∏–º—É–º–∞!{Colors.END}")
                        auction_active = False
                        
                elif choice == "3":
                    # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤
                    self.print_leaderboard()
                    input(f"{Colors.YELLOW}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...{Colors.END}")
                    
                elif choice == "4":
                    # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ä–∞—É–Ω–¥
                    print(f"\n{Colors.YELLOW}‚è≠Ô∏è –†–∞—É–Ω–¥ –ø—Ä–æ–ø—É—â–µ–Ω{Colors.END}")
                    auction_active = False
                    
                else:
                    print(f"\n{Colors.RED}‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!{Colors.END}")
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏
                if auction_active:
                    time.sleep(0.5)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—É–Ω–¥–∞
            if not auction_active:
                print(f"\n{Colors.BOLD}üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—É–Ω–¥–∞:{Colors.END}")
                self.print_leaderboard()
                
                if round_count < max_rounds and self.products:
                    input(f"{Colors.YELLOW}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞...{Colors.END}")
        
        # –ö–æ–Ω–µ—Ü –∏–≥—Ä—ã
        self.clear_screen()
        self.print_header()
        print(f"{Colors.BOLD}{Colors.GREEN}üéâ –ò–ì–†–ê –ó–ê–í–ï–†–®–ï–ù–ê! üéâ{Colors.END}\n")
        
        print(f"{Colors.BOLD}üìä –§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:{Colors.END}")
        self.print_leaderboard()
        
        print(f"{Colors.BOLD}üë§ –í–ê–®–ò –†–ï–ó–£–õ–¨–¢–ê–¢–´:{Colors.END}")
        self.print_player_info(self.user_player)
        
        print(f"{Colors.CYAN}–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É! –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üëã{Colors.END}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        game = DutchAuctionGame()
        game.run_game()
    except KeyboardInterrupt:
        print(f"\n\n{Colors.RED}–ò–≥—Ä–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º{Colors.END}")
    except Exception as e:
        print(f"\n\n{Colors.RED}–û—à–∏–±–∫–∞: {e}{Colors.END}")

if __name__ == "__main__":
    main()
